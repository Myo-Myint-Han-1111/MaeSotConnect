generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  password       String?
  image          String?
  role           Role          @default(ORGANIZATION_ADMIN)
  emailVerified  DateTime?
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  accounts       Account[]
  sessions       Session[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id                  String       @id @default(uuid())
  title               String
  titleMm             String?
  subtitle            String
  subtitleMm          String?
  startDate           DateTime     // Changed from String to DateTime
  startDateMm         DateTime?    // Changed from String? to DateTime?
  endDate             DateTime     // New field
  endDateMm           DateTime?    // New field
  duration            Int          // Changed from String to Int (number)
  durationMm          Int?         // Changed from String? to Int? (number)
  schedule            String
  scheduleMm          String?
  feeAmount           Float        // New field, using Float for decimal support
  feeAmountMm         Float?       // New field, using Float for decimal support
  ageMin              Int          // New field
  ageMinMm            Int?         // New field
  ageMax              Int          // New field
  ageMaxMm            Int?         // New field
  document            String       // New field
  documentMm          String?      // New field
  availableDays       Boolean[]
  description         String?
  descriptionMm       String?
  outcomes            String[]
  outcomesMm          String[]
  scheduleDetails     String?
  scheduleDetailsMm   String?
  selectionCriteria   String[]
  selectionCriteriaMm String[]
  organizationId      String?      
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  badges              Badge[]
  organizationInfo    Organization? @relation(fields: [organizationId], references: [id])
  faq                 FAQ[]
  images              Image[]
}

model Image {
  id       String @id @default(cuid())
  url      String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Badge {
  id              String @id @default(cuid())
  text            String
  color           String
  backgroundColor String
  courseId        String
  course          Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model FAQ {
  id         String  @id @default(uuid())
  question   String
  questionMm String?
  answer     String
  answerMm   String?
  courseId   String
  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String   @id @default(cuid())
  name         String
  description  String
  phone        String
  email        String
  address      String
  facebookPage String?
  latitude     Float
  longitude    Float
  courses      Course[]
  users        User[]
  district     String?
  province     String?
  
}

model AdminAllowList {
  id      String   @id @default(cuid())
  email   String   @unique
  addedBy String?
  addedAt DateTime @default(now())
  notes   String?
}

enum Role {
  PLATFORM_ADMIN
  ORGANIZATION_ADMIN
}
