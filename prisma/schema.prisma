generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  password       String?
  image          String?
  role           Role          @default(ORGANIZATION_ADMIN)
  emailVerified  DateTime?
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  accounts       Account[]
  sessions       Session[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id                    String    @id @default(cuid())
  slug                  String    @unique
  title                 String
  titleMm               String?
  subtitle              String
  subtitleMm            String?
  startDate             DateTime
  startDateMm           DateTime?
  endDate               DateTime
  endDateMm             DateTime?
  duration              Int
  durationMm            Int?
  schedule              String
  scheduleMm            String?
  feeAmount             Int       @default(0)
  feeAmountMm           Int?
  ageMin                Int
  ageMinMm              Int?
  ageMax                Int
  ageMaxMm              Int?
  document              String
  documentMm            String?
  province              String?
  district              String?
  address               String?   // Course-specific address
  applyByDate           DateTime? // Application deadline
  applyByDateMm         DateTime? // Myanmar version of application deadline
  availableDays         Boolean[]
  description           String?
  descriptionMm         String?
  outcomes              String[]
  outcomesMm            String[]
  scheduleDetails       String?
  scheduleDetailsMm     String?
  selectionCriteria     String[]
  selectionCriteriaMm   String[]
  organizationId        String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organizationInfo      Organization? @relation(fields: [organizationId], references: [id])
  images                Image[]
  badges                Badge[]
  faq                   FAQ[]
}

model Image {
  id       String @id @default(cuid())
  url      String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Badge {
  id              String @id @default(cuid())
  text            String
  color           String
  backgroundColor String
  courseId        String
  course          Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model FAQ {
  id         String  @id @default(uuid())
  question   String
  questionMm String?
  answer     String
  answerMm   String?
  courseId   String
  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String   @id @default(cuid())
  slug         String @unique
  name         String
  description  String
  phone        String
  email        String
  address      String?
  facebookPage String?
  latitude     Float
  longitude    Float
  logoImage    String?  // Moved from Course model
  courses      Course[]
  users        User[]
  district     String?
  province     String?
  
}

model AdminAllowList {
  id      String   @id @default(cuid())
  email   String   @unique
  addedBy String?
  addedAt DateTime @default(now())
  notes   String?
}

enum Role {
  PLATFORM_ADMIN
  ORGANIZATION_ADMIN
}
