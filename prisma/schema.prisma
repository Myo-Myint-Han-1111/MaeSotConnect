generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AdminAllowList {
  id      String   @id
  email   String   @unique
  addedBy String?
  addedAt DateTime @default(now())
  notes   String?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Badge {
  id              String @id
  text            String
  color           String
  backgroundColor String
  courseId        String
  Course          Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Course {
  id                  String        @id
  title               String
  titleMm             String?
  subtitle            String
  subtitleMm          String?
  startDate           DateTime
  endDate             DateTime
  duration            Int
  schedule            String
  scheduleMm          String?
  feeAmount           Int           @default(0)
  ageMin              Int?
  ageMax              Int?
  document            String?
  documentMm          String?
  availableDays       Boolean[]
  description         String?
  descriptionMm       String?
  outcomes            String[]
  outcomesMm          String[]
  scheduleDetails     String?
  scheduleDetailsMm   String?
  selectionCriteria   String[]
  selectionCriteriaMm String[]
  organizationId      String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime
  district            String?
  province            String?
  address             String?
  applyByDate         DateTime?
  slug                String        @unique
  howToApply          String[]      @default([])
  howToApplyMm        String[]      @default([])
  applyButtonText     String?
  applyButtonTextMm   String?
  applyLink           String?
  estimatedDate       String?
  startByDate         DateTime?
  createdBy           String?
  lastModifiedBy      String?
  publishedAt         DateTime?
  status              CourseStatus  @default(PUBLISHED)
  durationUnit        DurationUnit  @default(DAYS)
  badges              Badge[]
  createdByUser       User?         @relation("CreatedCourses", fields: [createdBy], references: [id])
  lastModifiedByUser  User?         @relation("ModifiedCourses", fields: [lastModifiedBy], references: [id])
  organizationInfo    Organization? @relation(fields: [organizationId], references: [id])
  faq                 FAQ[]
  images              Image[]

  @@index([startDate])
  @@index([startDate, status])
  @@index([district])
  @@index([province])
  @@index([startByDate])
  @@index([organizationId])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model FAQ {
  id         String  @id
  question   String
  questionMm String?
  answer     String
  answerMm   String?
  courseId   String
  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Image {
  id       String @id
  url      String
  courseId String
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Organization {
  id           String           @id
  name         String
  description  String
  phone        String
  email        String
  address      String?
  facebookPage String?
  latitude     Float
  longitude    Float
  district     String?
  province     String?
  logoImage    String?
  slug         String           @unique
  drafts       ContentDraft[]
  courses      Course[]
  users        User[]
  invitations  UserInvitation[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id              String           @id
  name            String
  email           String           @unique
  password        String?
  image           String?
  role            Role             @default(ORGANIZATION_ADMIN)
  emailVerified   DateTime?
  organizationId  String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  invitedAt       DateTime?
  invitedBy       String?
  lastLoginAt     DateTime?
  status          UserStatus       @default(ACTIVE)
  accounts        Account[]
  advocateProfile AdvocateProfile?
  drafts          ContentDraft[]
  createdCourses  Course[]         @relation("CreatedCourses")
  modifiedCourses Course[]         @relation("ModifiedCourses")
  organization    Organization?    @relation(fields: [organizationId], references: [id])
}

model UserInvitation {
  id             String           @id @default(cuid())
  email          String           @unique
  role           Role             @default(YOUTH_ADVOCATE)
  organizationId String?
  invitedBy      String
  invitedAt      DateTime         @default(now())
  expiresAt      DateTime
  status         InvitationStatus @default(PENDING)
  notes          String?
  Organization   Organization?    @relation(fields: [organizationId], references: [id])
}

model ContentDraft {
  id               String        @id @default(cuid())
  title            String
  type             DraftType
  content          Json
  status           DraftStatus   @default(PENDING)
  createdBy        String
  organizationId   String?
  submittedAt      DateTime      @default(now())
  reviewedAt       DateTime?
  reviewedBy       String?
  reviewNotes      String?
  originalCourseId String?
  author           User          @relation(fields: [createdBy], references: [id])
  organization     Organization? @relation(fields: [organizationId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AdvocateProfile {
  id               String        @id @default(cuid())
  userId           String        @unique
  publicName       String?
  bio              String?
  avatarUrl        String?
  showOrganization Boolean       @default(false)
  status           ProfileStatus @default(DRAFT)
  submittedAt      DateTime?
  reviewedAt       DateTime?
  reviewedBy       String?
  reviewNotes      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  UNDER_REVIEW
  ARCHIVED
}

enum Role {
  PLATFORM_ADMIN
  ORGANIZATION_ADMIN
  YOUTH_ADVOCATE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum DraftType {
  COURSE
  ORGANIZATION_UPDATE
  ORGANIZATION
}

enum DraftStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}

enum ProfileStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  HIDDEN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum DurationUnit {
  DAYS
  WEEKS
  MONTHS
  YEARS
}
